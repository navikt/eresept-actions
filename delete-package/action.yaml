name: cleanup docker images, re-usable
description: 'deletes packages from github'

inputs:
  owner:
    description: owner of the package (user or organization)
    required: true
    default: 'navikt'

  name:
    description: name of the package containing the version to delete.
    required: true

  token:
    description: token with the necessary scopes to delete package versions.
    required: true

  tag:
    description: tag to delete
    required: false

  dry-run:
    description: if true will only report what would have been done, but not delete anything
    required: false
    default: 'false'

  type:
    description: type of package, container or maven
    required: false
    default: 'container'

  untagged-keep-latest:
    description: delete all untagged images except the last N
    required: false

  untagged-older-than:
    description: delete all untagged images older than N in days.
    required: false

  tag-regex:
    description: regex to apply to tags. images will be included if ANY of the tags match the entered regex. If this is set, tagged-keep-latest must also be set
    required: false

  tagged-keep-latest:
    description: delete all tagged images matching tag-regex except the last N. if this is set, tag-regex must also be set
    required: false

runs:
  using: ubuntu-latest
  steps:
    - uses: actions/github-script@v6
      with:
        script: |
          const utils = require("./utils")(github, context, core);
                      
          async function deleteTagRegexMatchOrderGreaterThan(config, octokit) {
            core.info(`ðŸ”Ž finding latest tagged ${config.taggedKeepLatest} packages matching regex ${config.tagRegex}. Also finding latest untagged ${config.untaggedKeepLatest} packages...`);
          
            const pkgs = await utils.findPackageVersionsTagRegexMatchOrderGreaterThan(
              octokit,
              config.owner,
              config.name,
              config.type,
              config.taggedKeepLatest,
              config.untaggedKeepLatest,
              new RegExp(config.tagRegex));
          
            core.startGroup(`ðŸ—‘ delete ${pkgs.length} packages`);
            
            for (const pkg of pkgs) {
              if (!config.dryRun) {
                await utils.deletePackageVersion(
                octokit,
                config.owner,
                config.name,
                config.type,
                pkg.id);
              }
              core.info(`âœ… package #${pkg.id} deleted.`);
            }

            core.endGroup();
          }

          module.exports = { deleteTagRegexMatchOrderGreaterThan };
