name: Gradle release application, re-usable
on:
  workflow_call:
    inputs:
      java-version:
        description: the java version to use
        required: false
        type: number
        default: 21
      application:
        description: 'The application to release'
        required: true
        type: string
        # no default
      application-version:
        description: 'The version to release'
        required: false
        type: string
        # no default
      skip-tests:
        description: 'if execution of tests should be skipped'
        required: false
        type: boolean
        default: false
      sbom-build:
        description: 'command to use when building sbom'
        required: false
        type: string
        default: 'cyclonedxBom'
      sbom-path:
        description: 'where to find the sbom file'
        required: false
        type: string
        default: 'build/reports/bom.json'
    secrets:
      webhook:
        required: true
      token:
        required: true
      identity-provider:
        required: true

jobs:
  release:
    timeout-minutes: 40
    name: Release ${{ inputs.application }}
    runs-on: ubuntu-latest
    permissions:
      actions: read # for private repositories
      contents: write
      id-token: write
      security-events: write # push sarif to github security
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
        with:
          fetch-depth: 0
          repository: ${{ github.event.repository.owner.login }}/${{ inputs.application }}
          ref: '${{ github.ref_name }}'

      - uses: actions/setup-java@8df1039502a15bceb9433410b1a100fbe190c53b #v4.5.0
        with:
          distribution: 'temurin'
          java-version: '${{ inputs.java-version }}'

      - name: Set some variables
        run: |
          echo "starttime=$(date +%s)" >> $GITHUB_ENV
          sudo timedatectl set-timezone "Europe/Oslo"
          echo "buildarg=$(if [ '${{ inputs.skip-tests }}' = 'true' ]; then echo 'assemble'; else echo 'build'; fi)" >> $GITHUB_ENV 

      - name: get versions, changelog and more
        id: get-versions
        uses: navikt/eresept-actions/get-versions-and-more@main

      - name: Setup gradle
        uses: gradle/actions/setup-gradle@473878a77f1b98e2b5ac4af93489d1656a80a5ed #v4
        with:
          dependency-graph: generate-and-submit

      - name: Compile and test
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
        run: ./gradlew ${{ env.buildarg }} ${{ inputs.sbom-build }} --no-daemon

      - name: Tag
        run: |
          git tag -a ${{ steps.get-versions.outputs.next-version }} -m 'tagging as v${{ steps.get-versions.outputs.next-version }}'
          git push origin ${{ steps.get-versions.outputs.next-version }}

      - name: Docker build and push
        id: docker-push
        uses: nais/docker-build-push@5246e4705d79945a0ec28eb9bd3638dd534fee46 # v0.17.0
        with:
          team: teameresept
          docker_context: ${{ steps.get-versions.outputs.docker-dir }}
          dockerfile: ${{ steps.get-versions.outputs.docker-dir }}/Dockerfile
          identity_provider: ${{ secrets.identity-provider }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          tag: ${{ steps.get-versions.outputs.next-version }}
          build_args: |
            version=${{ steps.get-versions.outputs.next-version }}
            app_name=${{ inputs.application }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@915b19bbe73b92a6cf82a1bc12b087c9a19a5fe2 # v0.24.0
        env:
          TRIVY_SKIP_DB_UPDATE: "true"
          TRIVY_JAVA_DB_REPOSITORY: "europe-north1-docker.pkg.dev/nais-io/remote-ghcr/aquasecurity/trivy-java-db:1,public.ecr.aws/aquasecurity/trivy-java-db,ghcr.io/aquasecurity/trivy-java-db:1"
        with:
          image-ref: '${{ steps.docker-push.outputs.image }}'
          format: 'sarif'
          hide-progress: true
          output: 'trivy-results.sarif'
          severity: 'MEDIUM,HIGH,CRITICAL'
          limit-severities-for-sarif: true

      - name: Upload results to GitHub Security
        uses: github/codeql-action/upload-sarif@ea9e4e37992a54ee68a9622e985e60c8e8f12d9f # v2.19.0
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Checkout badges
        uses: navikt/eresept-actions/badges-checkout@main

      - name: Calculate execution time
        run: |
          END_TIME=$(date +%s)
          echo "exectime=$(( $END_TIME - ${{ env.starttime }} ))" >> $GITHUB_ENV

      - name: Version badge
        uses: navikt/eresept-actions/badges-create@main
        with:
          left: 'version'
          right: '${{ steps.get-versions.outputs.next-version }}'
          color: 'blue'
          filename: 'version'
          logo: 'tag'

      - name: Release date badge
        uses: navikt/eresept-actions/badges-create@main
        with:
          left: 'release date'
          right: '${{ steps.get-versions.outputs.current-datetime }}'
          color: 'blue'
          filename: 'rel-date'
          logo: 'calendar'

      - name: Time used badge
        uses: navikt/eresept-actions/badges-create@main
        with:
          left: 'release execution time'
          right: '${{ env.exectime }}'
          color: 'blue'
          filename: 'rel-exec-time'
          logo: 'stopwatch'

      - name: Scan date badge
        uses: navikt/eresept-actions/badges-create@main
        with:
          left: 'scanned'
          right: '${{ steps.get-versions.outputs.current-datetime }}'
          color: 'blue'
          filename: 'scan-date'
          logo: 'shield'

      - name: Commit badges
        uses: navikt/eresept-actions/badges-commit@main

      - name: Summary
        run: |
          echo "### Released **${{ github.event.repository.name }}:${{ steps.get-versions.outputs.next-version }}** in ${{ env.exectime }} seconds" >> $GITHUB_STEP_SUMMARY

      - name: report to slack
        if: always()
        uses: navikt/eresept-actions/slack-notify@main
        with:
          status: "${{ job.status }}"
          username: "release ${{ inputs.application }}:${{ steps.get-versions.outputs.next-version }}"
          icon: ":docker:"
          title-success: "Released _*${{ inputs.application }}:${{ steps.get-versions.outputs.next-version }}*_ in ${{ env.exectime }} seconds"
          title-failure: "Release of _*${{ inputs.application }}*_ failed"
          title-cancelled: "Release of _*${{ inputs.application }}*_ was cancelled"
          message-success: "```${{ steps.get-versions.outputs.changelog }}```"
          webhook: ${{ secrets.webhook }}
