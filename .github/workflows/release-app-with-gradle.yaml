name: Gradle release application, re-usable
on:
  workflow_call:
    inputs:
      java-version:
        description: the java version to use
        required: false
        type: number
        default: 21
      application:
        description: 'The application to release'
        required: true
        type: string
        # no default
      application-version:
        description: 'The version to release'
        required: false
        type: string
        # no default
      skip-tests:
        description: 'if execution of tests should be skipped'
        required: false
        type: boolean
        default: false
      sbom-build:
        description: 'command to use when building sbom'
        required: false
        type: string
        default: 'cyclonedxBom'
      sbom-path:
        description: 'where to find the sbom file'
        required: false
        type: string
        default: 'build/reports/bom.json'
    secrets:
      webhook:
        required: true
      token:
        required: true

env:
  TZ: Europe/Oslo

jobs:
  release:
    timeout-minutes: 40
    name: Release ${{ inputs.application }}
    runs-on: ubuntu-latest
    permissions:
      actions: read # for private repositories
      contents: write
      id-token: write
      security-events: write # push sarif to github security
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5.0.0
        with:
          fetch-depth: 0
          repository: ${{ github.event.repository.owner.login }}/${{ inputs.application }}
          ref: '${{ github.ref_name }}'
          persist-credentials: true

      - uses: gradle/actions/wrapper-validation@017a9effdb900e5b5b2fddfb590a105619dca3c3 # v4.4.2

      - uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 #v5.0.0
        with:
          distribution: 'temurin'
          java-version: '${{ inputs.java-version }}'

      - name: Set some variables
        run: |
          echo "starttime=$(date +%s)" >> $GITHUB_ENV
          sudo timedatectl set-timezone "Europe/Oslo"
          echo "buildarg=$(if [ ${SKIP} = 'true' ]; then echo 'assemble'; else echo 'build'; fi)" >> $GITHUB_ENV
        env:
          SKIP: ${{ inputs.skip-tests }}

      - name: get versions, changelog and more
        id: get-versions
        uses: navikt/eresept-actions/get-versions-and-more@main
        with:
          application-version: '${{ inputs.application-version }}'

      - name: Setup gradle
        uses: gradle/actions/setup-gradle@017a9effdb900e5b5b2fddfb590a105619dca3c3 # v4.4.2
        with:
          dependency-graph: generate-and-submit

      - name: Compile and test
        env:
          GITHUB_TOKEN: ${{ secrets.token }}
          SBOM: ${{ inputs.sbom-build }}
          NEXT_VERSION: ${{ steps.get-versions.outputs.next-version }}
        run: ./gradlew ${buildarg} ${SBOM} --no-daemon -Pversion=${NEXT_VERSION}


      - name: Tag
        run: |
          git tag -a ${NEXT_VERSION} -m "tagging as v${NEXT_VERSION}"
          git push origin ${NEXT_VERSION}
        env:
          NEXT_VERSION: ${{ steps.get-versions.outputs.next-version }}

      - name: Docker build and push
        id: docker-push
        uses: nais/docker-build-push@791ebb6f74b82849c742a9bc9c97abe44c6c111f # v0
        with:
          team: teameresept
          docker_context: ${{ steps.get-versions.outputs.docker-dir }}
          dockerfile: ${{ steps.get-versions.outputs.docker-dir }}/Dockerfile
          tag: ${{ steps.get-versions.outputs.next-version }}
          build_args: |
            version=${{ steps.get-versions.outputs.next-version }}
            app_name=${{ inputs.application }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@f9424c10c36e288d5fa79bd3dfd1aeb2d6eae808 # v0.33.0
        with:
          image-ref: '${{ steps.docker-push.outputs.image }}'
          format: 'sarif'
          hide-progress: true
          output: 'trivy-results.sarif'
          severity: 'MEDIUM,HIGH,CRITICAL'
          limit-severities-for-sarif: true

      - name: Upload results to GitHub Security
        uses: github/codeql-action/upload-sarif@f1f6e5f6af878fb37288ce1c627459e94dbf7d01 # v3.29.5
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Checkout badges
        uses: navikt/eresept-actions/badges-checkout@main

      - name: Calculate execution time
        run: |
          END_TIME=$(date +%s)
          echo "exectime=$(( $END_TIME - ${starttime} ))" >> $GITHUB_ENV

      - name: Version badge
        uses: navikt/eresept-actions/badges-create@main
        with:
          left: 'version'
          right: '${{ steps.get-versions.outputs.next-version }}'
          color: 'blue'
          filename: 'version'
          logo: 'tag'

      - name: Release date badge
        uses: navikt/eresept-actions/badges-create@main
        with:
          left: 'release date'
          right: '${{ steps.get-versions.outputs.current-datetime }}'
          color: 'blue'
          filename: 'rel-date'
          logo: 'calendar'

      - name: Time used badge
        uses: navikt/eresept-actions/badges-create@main
        with:
          left: 'release execution time'
          right: '${{ env.exectime }}'
          color: 'blue'
          filename: 'rel-exec-time'
          logo: 'stopwatch'

      - name: Scan date badge
        uses: navikt/eresept-actions/badges-create@main
        with:
          left: 'scanned'
          right: '${{ steps.get-versions.outputs.current-datetime }}'
          color: 'blue'
          filename: 'scan-date'
          logo: 'shield'

      - name: Commit badges
        uses: navikt/eresept-actions/badges-commit@main

      - name: Summary
        run: |
          echo "### Released **${REPO}:${NEXT_VERSION}** in ${exectime} seconds" >> $GITHUB_STEP_SUMMARY
        env:
          REPO: ${{ github.event.repository.name }}
          NEXT_VERSION: ${{ steps.get-versions.outputs.next-version }}

      - name: report to slack
        if: always()
        uses: navikt/eresept-actions/slack-notify@main
        with:
          status: "${{ job.status }}"
          username: "release ${{ inputs.application }}:${{ steps.get-versions.outputs.next-version }}"
          icon: ":docker:"
          title-success: "Released _*${{ inputs.application }}:${{ steps.get-versions.outputs.next-version }}*_ in ${{ env.exectime }} seconds"
          title-failure: "Release of _*${{ inputs.application }}*_ failed"
          title-cancelled: "Release of _*${{ inputs.application }}*_ was cancelled"
          message-success: "```${{ steps.get-versions.outputs.changelog }}```"
          webhook: ${{ secrets.webhook }}
