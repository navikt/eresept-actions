name: Gradle release application, re-usable
on:
  workflow_call:
    inputs:
      application:
        description: 'The application to release'
        required: true
        type: string
        # no default
      application-version:
        description: 'The version to release'
        required: false
        type: string
        # no default
      skip-tests:
        description: 'if execution of tests should be skipped'
        required: false
        type: boolean
        default: false
    secrets:
      webhook:
        required: true
      token:
        required: true
      identity-provider:
        required: true

jobs:
  release:
    timeout-minutes: 40
    name: Release ${{ inputs.application }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 #v4.1.1
        with:
          fetch-depth: 0
          repository: navikt/${{ inputs.application }}

      - uses: actions/setup-java@0ab4596768b603586c0de567f2430c30f5b0d2b0 #v3.13.0
        with:
          distribution: 'temurin'
          java-version: '19'

      - name: Set some variables
        run: |
          echo "starttime=$(date +%s)" >> $GITHUB_ENV
          sudo timedatectl set-timezone "Europe/Oslo"
          echo "buildarg=$(if [ '${{ inputs.skip-tests }}' = 'true' ]; then echo 'assemble'; else echo 'build'; fi)" >> $GITHUB_ENV 

      - name: Compile and test
        id: compile
        uses: gradle/gradle-build-action@842c587ad8aa4c68eeba24c396e15af4c2e9f30a #v2.9.0
        with:
          dependency-graph: generate-and-submit
          arguments: --configuration-cache ${{ env.buildarg }} --no-daemon

      - name: Get version numbers and changelog
        run: |
          CURVERSION=$(grep -v '^#' gradle.properties | grep '^version=' | cut -d '=' -f2)
          INPUT_VERSION=${{ inputs.application-version }}
          RELVERSION=$(echo ${INPUT_VERSION:-$CURVERSION}|sed 's/-.*//')
          echo "curversion=$CURVERSION" >> $GITHUB_ENV
          echo "relversion=$RELVERSION" >> $GITHUB_ENV
          echo "nextversion=$(echo $RELVERSION|awk '{split($0,a,"."); b=a[3]+1;print a[1]"."a[2]"."b}')-SNAPSHOT" >> $GITHUB_ENV
          echo "appver=${{ inputs.application }}:$RELVERSION" >> $GITHUB_ENV
          echo "reldate=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          # multiline output
          delim="EOF--$(date +%s)"
          echo "CHANGELOG<<$delim" >> $GITHUB_ENV
          git log $(git describe --tags --abbrev=0)..HEAD --oneline >> $GITHUB_ENV
          echo "$delim" >> $GITHUB_ENV

      - name: Configure git user
        run: |
          git config user.email "${{ github.actor }}@users.noreply.github.com" && git config user.name "Github Actions"

      - name: Publish, tag
        run: |
          sed -ie 's/^version=${{ env.curversion }}/version=${{ env.relversion }}/' gradle.properties
          ./gradlew assemble --no-daemon
          git commit -m 'Commit new version ${{ env.relversion }}, by ${{ github.actor }} [ci skip]' gradle.properties
          git tag -a v${{ env.relversion }} -m 'tagging as v${{ env.relversion }} [ci skip]'
          DIR=$(dirname $(find . -name Dockerfile -maxdepth 2))
          echo "dockerdir=$DIR" >> $GITHUB_ENV
#          DOCKER_IMG="ghcr.io/navikt/${{ inputs.application }}/${GITHUB_REPOSITORY#*/}:${{ env.relversion }}"
#          echo "dockerimg=$DOCKER_IMG" >> $GITHUB_ENV

      - name: Docker build and push
        uses: nais/docker-build-push@3257289fd8cb0018ce0bda55db86ee54c21669b1 # v0.10.0
        with:
          byosbom: ${{ steps.compile.outputs.dependency-graph-file }}
          team: teameresept
          docker_context: ${{ env.dockerdir }}
          dockerfile: ${{ env.dockerdir }}/Dockerfile
          identity_provider: ${{ secrets.identity-provider }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          tag: ${{ env.relversion }}
          build_args: |
            version=${{ env.relversion }}
            app_name=${{ inputs.application }}

#      - uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a # v2.1.0
#        with:
#          registry: ghcr.io
#          username: navikt/${{ inputs.application }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671 # v4.0.0
#        with:
#          context: ${{ env.dockerdir }}
#          push: true
#          pull: true
#          build-args: |
#            "version=${{ env.relversion }}"
#            "app_name=${{ inputs.application }}"
#          tags: ${{ env.dockerimg }}

      - name: Prepare for next
        run: |
          sed -ie 's/^version=${{ env.relversion }}/version=${{ env.nextversion }}/' gradle.properties
          git commit -m 'Updated to new dev-version ${{ env.nextversion }} after release by ${{ github.actor }} [ci skip]' gradle.properties
          git push -f origin v${{ env.relversion }} main

      - name: Checkout badges
        uses: navikt/eresept-actions/badges-checkout@main

      - name: Calculate execution time
        run: |
          END_TIME=$(date +%s)
          echo "exectime=$(( $END_TIME - ${{ env.starttime }} ))" >> $GITHUB_ENV

      - name: Version badge
        uses: navikt/eresept-actions/badges-create@main
        with:
          left: 'version'
          right: '${{ env.relversion }}'
          color: 'blue'
          filename: 'version'
          logo: 'tag'

      - name: Release date badge
        uses: navikt/eresept-actions/badges-create@main
        with:
          left: 'release date'
          right: '${{ env.reldate }}'
          color: 'blue'
          filename: 'rel-date'
          logo: 'calendar'

      - name: Time used badge
        uses: navikt/eresept-actions/badges-create@main
        with:
          left: 'release execution time'
          right: '${{ env.exectime }}'
          color: 'blue'
          filename: 'rel-exec-time'
          logo: 'stopwatch'

      - name: Commit badges
        uses: navikt/eresept-actions/badges-commit@main

      - name: Summary
        run: |
          echo "### Released **${{ github.event.repository.name }}** in ${{ env.exectime }} seconds" >> $GITHUB_STEP_SUMMARY

      - name: report to slack
        if: always()
        uses: navikt/eresept-actions/slack-notify@main
        with:
          status: "${{ job.status }}"
          username: "release ${{ env.appver }}"
          icon: ":docker:"
          title-success: "Released _*${{ env.appver }}*_ in ${{ env.exectime }} seconds"
          title-failure: "Release of _*${{ inputs.application }}*_ failed"
          title-cancelled: "Release of _*${{ inputs.application }}*_ was cancelled"
          message-success: "```${{ env.CHANGELOG }}```"
          webhook: ${{ secrets.webhook }}
