name: Clean, re-usable
# deletes packages. does no pagination, so if package has more than 100 versions the oldest
# versions will not be deleted before the number of versions is below 101
on:
  workflow_call:
    inputs:
      package:
        description: 'the package to clean, if type is container the repo name and colon must be omitted, mandatory if type is maven, defaults to repository name (without owner) if type is container'
        required: false
        default: ''
        type: string
      type:
        description: 'the package type, only container and maven is supported'
        required: false
        type: string
        default: 'container'
      old-versions-to-delete:
        description: 'the maximum number of old versions to delete'
        required: false
        default: 1
        type: number
      versions-to-keep:
        description: 'the minimum number of old versions to keep'
        required: false
        default: 20
        type: number
      version:
        description: 'only delete this specific version'
        required: false
        default: ''
        type: string
      dry-run:
        description: 'false if cleaning should be done, true if do a dry run without deleting packages'
        required: false
        default: true
        type: boolean
    secrets:
      token:
        description: 'github token'
        required: true

jobs:
  clean:
    runs-on: ubuntu-latest
    steps:
      - name: clean
        run: |
          delver() {
            echo deleting $1
            if [ "${{ inputs.dry-run }}" = "false" ]
            then
              curl -s -X DELETE -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ secrets.token }}" "https://api.github.com/orgs/navikt/packages/${{ inputs.type }}/$PKG/versions/$1"
            fi
          }
          
          transform() {
            if [ "${{ inputs.type }}" == "maven" ]
            then
              cat tmp2.json | jq "[.[] |{id: .id, created_at: .created_at, version: .name }]" | jq ".[-$TAIL:]"
            else
              cat tmp2.json | jq "[.[] |{id: .id, created_at: .created_at, version: .metadata.container.tags[0] }]" | jq ".[-$TAIL:]"
            fi
          }
          
          if [ "${{ inputs.type }}" != "container" ] && [ "${{ inputs.type }}" != "maven" ]
          then
            echo "invalid package type, only container and maven is supported"
            exit 1
          fi
          REPOSITORY_NAME=${GITHUB_REPOSITORY#*/}
          if [ "${{ inputs.type }}" = "maven" ]
          then
            if [ -z "${{ inputs.package }}" ]
            then
              echo "package is mandatory if type is maven"
              exit 1
            fi
            PKG="${{ inputs.package }}"
          else
            if [ -z "${{ inputs.package }}" ]
            then
              PKG="${REPOSITORY_NAME}%2F${REPOSITORY_NAME}"
            else
              PKG="${REPOSITORY_NAME}%2F${{ inputs.package }}"
            fi
          fi
          curl -w "%{http_code}" -s -H "Accept: application/vnd.github+json" -H "Authorization: token ${{ secrets.token }}" "https://api.github.com/orgs/navikt/packages/${{ inputs.type }}/$PKG/versions?per_page=100" > tmp.json
          STATUS=$(tail -1 tmp.json)
          if [ "$STATUS" != "200" ]
          then
              echo "fetching of packages failed with status $STATUS"
              head -n -1 tmp.json
              exit 1
          fi
          cat tmp.json | head -n -1 > tmp2.json
          TOTAL=$(cat tmp2.json | jq 'length')
          echo "package has $TOTAL versions (100 means 100 or more) before cleanup" >> $GITHUB_STEP_SUMMARY
          if [ -z "${{ inputs.version}" ]
          then
            TAIL=$(echo $TOTAL - ${{ inputs.versions-to-keep }} | bc)
            if [ $TAIL -gt ${{ inputs.old-versions-to-delete }} ]
            then
              TAIL=${{ inputs.old-versions-to-delete }}
            fi
            if [ $TAIL -gt 0 ]
            then
              echo "will attempt to delete $TAIL versions" >> $GITHUB_STEP_SUMMARY
              TRANSFORMED=$(transform)
              echo "will delete the following packages from $REPOSITORY_NAME:"
              echo $TRANSFORMED | jq
              VERSIONS=$(echo $TRANSFORMED | jq ".[] .id" | tr '\012' ' ')
              for v in $VERSIONS
              do
                delver $v
              done
              if [ "${{ inputs.dry-run }}" = "false" ]
              then
                echo "$TAIL versions deleted" >> $GITHUB_STEP_SUMMARY
              else
                echo "dry run: 0 versions deleted" >> $GITHUB_STEP_SUMMARY
              fi
            else
                echo "no versions to delete" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "will attempt to delete version $version" >> $GITHUB_STEP_SUMMARY
            TAIL=$TOTAL
            TRANSFORMED=$(transform)
            VERSION=$(echo $TRANSFORMED | jq '.[] | select(.version == "${{ inputs.version }}")' | jq .id'
            if [ -z "$VERSION" ]
            then
              echo "version ${{ inputs.version }} not found" >> $GITHUB_STEP_SUMMARY
            else
              delver $VERSION
              if [ "${{ inputs.dry-run }}" = "false" ]
              then
                echo "${{ inputs.version }} deleted" >> $GITHUB_STEP_SUMMARY
              else
                echo "dry run: ${{ inputs.version }} not deleted" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi